
function [isInfected] = POI_BinaryCR_integrated(params, makePlots)

%% PARAMETERS, GEOMETRY & INITIAL CONDITIONS
% V - virus, 
% T - target cell, 
% I - infected cell, 
% U - chemokine
% D - drug
[V, T, I, U, D, Geometry] = initializeParameters(params);
drugApplied = D.C0_L ~= 0;
modifiedDrug = 0;

% Infectivity beta model in tissue:
%getPhysics = @getPhysicsLib.physicsDiffusion_tissueInfectivity_v1;
% Collision theory model in tissue:
%getPhysics = @getPhysicsLib.physicsDiffusion_tissueCollision_v1;
% COLLISION MODEL TISSUE WITHOUT EPITHELIUM
%getPhysics = @getPhysicsLib.physicsDiffusion_tissueCollision_v1;
%getMesh = @getMeshLib.createMesh_LT;
%getIC = @getICLib.getIC_tissue;
%getResults = @getDestructuredResults.getResults_LT;

if drugApplied == 0
    % COLLISION MODEL TISSUE WITH EPITHELIUM, NO DRUG
    getPhysics = @getPhysicsLib.physicsDiffusion_tissueCollision_v3;
    getMesh = @getMeshLib.createMesh_LES;
    getIC = @getICLib.getIC_EpiStroma;
    getResults = @getDestructuredResults.getResults_LES;
    getSparsity = @getSparsityLib.defaultSparsity;
    getJacobian = @getJacobianLib.jacobianNoDrugCellMigration;
else
    % COLLISION MODEL TISSUE WITH EPITHELIUM, WITH DRUG
    if modifiedDrug == 1
        getPhysics = @getPhysicsLib.physicsDiffusion_tissueCollision_v3_Drug_cellToCell;
    else
        getPhysics = @getPhysicsLib.physicsDiffusion_tissueCollision_v3_Drug_freeVirus;
    end
    getMesh = @getMeshLib.createMesh_LES_Drug;
    getIC = @getICLib.getIC_EpiStroma_Drug;
    getResults = @getDestructuredResults.getResults_LES_Drug;
    getSparsity = @getSparsityLib.defaultSparsity;
end


%% GEOMETRY SPATIAL DISCRETIZATION

meshSize = 800;
[Mesh, totalSize] = getMesh(Geometry, meshSize);
%totalSize = Mesh.numX + Mesh.numT + Mesh.numT + 3; 
% WITHOUT CHEMOKINE:
%totalSize = Mesh.numX + Mesh.numS + Mesh.numS + 3; 
%tissue: virus: numx, chemokine: numt tcell: numt, icell: numt 
%blood: virus: 1, tcell: 1, icell: 1
     
%% TEMPORAL PARAMETRIZATION

numTimeSteps = 1000;
finalT = 90*24*60*60; %45 days in seconds
tvec = linspace(0,finalT,numTimeSteps);
tspan = [min(tvec),max(tvec)];
% t_sample = [0:1:10*60,...
%             10*60+1:60:24*60*60,...
%             24*60*60+1:1*60*60:36*60*60,...
%             36*60*60+1:4*60*60:tspan(end)];

%% PHYSICS - APPLYING INITIAL CONDITIONS TO MESH

IC = getIC(Mesh,V,T,D,params.T_VD);

if (totalSize ~= length(IC))
    fprintf('Size mismatch between mesh and initial condition. \n');
    fprintf('size mesh: %d \nSize IC: %d\n', totalSize, length(IC));
    return;
end
  
%% OPTIMIZING SOLVER

S = getSparsity(Mesh, totalSize);
S = sparse(S);
%opts1 = odeset('JPattern',S);
%'RelTol',1e-3,'AbsTol',1e-4
opts1 = odeset('Vectorized','on','JPattern',S,'RelTol',1e-3,'AbsTol',1e-4,'NonNegative',true);
%opts1 = odeset('Vectorized','on','Jacobian', @(t,sol) getJacobian(t,sol,Geometry,Mesh,V,T,I,totalSize));

%% RUNNING SOLVER
      
%[t,sol] = ode15s(@(t,sol) getPhysics(t,sol,IC,Geometry,Mesh,V,T,I,U), tspan, IC, opts1); %Geometry
if params.T_VD == 0
    [t,sol] = ode15s(@(t,sol) getPhysics(t,sol,IC,Geometry,Mesh,V,T,I,D,U), tspan, IC, opts1); %Geometry
    sol(sol<0) = 0;
elseif params.T_VD < 0 || params.T_VD > 0
    tspan_1 = [0,abs(params.T_VD)];
    tspan_2 = [abs(params.T_VD),finalT];
    [t1,sol1] = ode15s(@(t,sol) getPhysics(t,sol,IC,Geometry,Mesh,V,T,I,D,U), tspan_1, IC, opts1); %Geometry
    IC_2 = getICLib.getIC_EpiStroma_Drug_TVD(Mesh,V,T,D,params.T_VD,sol1,getResults);
    [t2,sol2] = ode15s(@(t,sol) getPhysics(t,sol,IC,Geometry,Mesh,V,T,I,D,U), tspan_2, IC_2, opts1); %Geometry
    t = [t1(1:end-1);t2];
    sol = [sol1(1:end-1,:);sol2];  
    sol(sol<0) = 0;
else
    fprintf('\nIssue with T_VD. \n');
end
sol = sol';

%Virions & Cells
%tissue: virus: numx, chemokine: numt tcell: numt, icell: numt 
%blood: virus: 1, tcell: 1, icell: 1

%% DECOMPACTING SOLUTION

[vir, drug, drugdp, tar, inf, chem, vir_b, drug_b, drugdp_b, tar_b, inf_b] = getResults(sol, Mesh, 1);

if makePlots == 1
    settingLabels = ["showVvsTime", "showVvsX", "showDvsTime", "showDdpvsTime", "showUvsTime", "showCellsvsTime","showVvsTime_b", "showDvsTime_b","showDdpvsTime_b","showCellsvsTime_b"];
    if drugApplied == 1 
        settingValues = [1, 1, 1, 1, 0, 1, 1, 1, 1, 1];
    else
        settingValues = [1, 1, 0, 0, 0, 1, 1, 0, 0, 1];
    end
    settingValues_test = [1,0,0,0,0,1,0]
    settings = dictionary(settingLabels, settingValues);
    createLinePlots(t/3600, Mesh, T, vir, drug, drugdp, chem, tar, inf, vir_b, drug_b, drugdp_b, tar_b, inf_b, settings)
    %createHeatmap(t/3600, Mesh, drug, [zeros(Mesh.numL,length(t));drugdp], vir, drugApplied)
    %checkTermMagnitudes(t/3600, sigmapr_term, r_avg, stax_avg)

end

timeInd2Weeks = find(t >= 18*24*60*60,1);
if ~isempty(timeInd2Weeks)
    isInfected = vir_b(timeInd2Weeks) > 20; %limits of detection and limits of infection, weld et al, 2022
    % 1 if > 20, 0 if < 20
else
    isInfected = -1;
    % error, no time point greater than 2 weeks.
end



end

% function q = calcQ(cTFVDP)
% 
% IC50 = 180; %(thËšis is in ng/ml, roughly = 0.4 uM, given molar mass of 447.173 g/mol))
% %     if (IC(numx+1) ~= 0)
% q = 1./(1+(IC50./(cTFVDP)));
% 
% end